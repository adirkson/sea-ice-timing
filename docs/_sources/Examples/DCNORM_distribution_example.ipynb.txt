{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using the dcnorm module\n",
    "\n",
    "* This notebook teaches some of the basic functionality of the `dcnorm` module.\n",
    "\n",
    "* You should have already installed the `NCGR` package (https://github.com/adirkson/sea-ice-timing) before running this notebook.  \n",
    "As a first step, we'll import the modules used in this notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from NCGR.dcnorm import dcnorm_gen\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before instantiating `dcnorm_gen`, we need to create variables for the **minimum** and **maximum** values that the DCNORM distribution takes (i.e. its support):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "a=120\n",
    "b=273"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For instantiating `dcnorm_gen`, the only important arguments are these values: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "dcnorm = dcnorm_gen(a=a, b=b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now make a DCNORM distribution object with the `a` and `b` values fixed, and some arbitrary parameter values $\\mu$ and $\\sigma$ (note that it is necessary to have $a\\leq \\mu \\leq b$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# mu variable for the DCNORM distribution\n",
    "m=132.\n",
    "# sigma variable for the DCNORM distribution\n",
    "s=20.\n",
    "\n",
    "# instantiate a dcnorm distribution object\n",
    "rv = dcnorm(m,s)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`rv` is now a frozen object representing a random variable described by the DCNORM distribution with the given parameters (try some others, too!); it has several methods (see documentation for `dcnorm_gen` and `scipy.stats.rv_continuous`). We'll go through some main ones now.\n",
    "\n",
    "For instance, its PDF can be plotted simply with:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = np.linspace(a, b, 1000) # discretize the range from a to b\n",
    "x_sub = x[(x!=a)&(x!=b)] # extract from those values where x is not a or b\n",
    "plt.figure()\n",
    "plt.plot(x_sub, rv.pdf(x_sub), color='r') # plot for a<x<b\n",
    "plt.plot(a, rv.pdf(a)*1e-1, 'o', color='r') # point mass at a (re-scale by 1/10 for plotting)\n",
    "plt.plot(b, rv.pdf(b)*1e-1, 'o', color='r') # point mass at b (re-scale by 1/10 for plotting)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that the maginute of the circles have been reduced by a factor of 1e-1 to make it easier to see the shape of the PDF. Above, it's not actually necessary to plot the different components of the PDF seperately; the reason for doing so was purely cosmetic. We could have also typed \n",
    "```python \n",
    "plt.plot(x,rv.pdf(x))\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A random sample of size 20 can be drawn from the distribution using the `dcnorm.rvs` method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = rv.rvs(size=20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll now plot the this sample that was generated, along with the true PDF:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.hist(X, density=True, color='b', alpha=0.5)\n",
    "plt.plot(x_sub, rv.pdf(x_sub), color='r') # plot for a<x<b\n",
    "plt.plot(a, rv.pdf(a)*1e-1, 'o', color='r') # point mass at a (re-scale by 1/10 for plotting)\n",
    "plt.plot(b, rv.pdf(b)*1e-1, 'o', color='r') # point mass at b (re-scale by 1/10 for plotting)\n",
    "plt.title('PDF')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we'll use the `dcnorm.fit` method to fit the sample of data to a DCNORM distribution:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "m_fit, s_fit = dcnorm.fit(X) # fit parameters to data\n",
    "rv_fit = dcnorm(m_fit, s_fit) # create new distribution object with fitted parameters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and recreate the previous plot, but also include the fitted distribution:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.hist(X, density=True, color='b', alpha=0.5, label='data')\n",
    "plt.plot(x_sub, rv.pdf(x_sub), color='r', label='true dist.') # plot for a<x<b\n",
    "plt.plot(a, rv.pdf(a)*1e-1, 'o', color='r') # point mass at a (re-scale by 1/10 for plotting)\n",
    "plt.plot(b, rv.pdf(b)*1e-1, 'o', color='r') # point mass at b (re-scale by 1/10 for plotting)\n",
    "\n",
    "plt.plot(x_sub, rv_fit.pdf(x_sub), color='b', label='fitted dist.') # plot for a<x<b\n",
    "plt.plot(a, rv_fit.pdf(a)*1e-1, 'o', color='b') # point mass at a (re-scale by 1/10 for plotting)\n",
    "plt.plot(b, rv_fit.pdf(b)*1e-1, 'o', color='b') # point mass at b (re-scale by 1/10 for plotting)\n",
    "\n",
    "plt.legend()\n",
    "plt.title('PDF')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can make an analogous plot for the CDF's as well, making used of the `dcnorm.ecdf` method to plot the CDF for the data (i.e. the empirical CDF)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.plot(x, dcnorm.ecdf(x,X), color='b', alpha=0.5, label='data')\n",
    "plt.plot(x, rv.cdf(x), color='r', label='true dist.') # plot for a<x<b\n",
    "plt.plot(x, rv_fit.cdf(x), color='b', label='fitted dist.') # plot for a<x<b\n",
    "plt.legend()\n",
    "plt.title('CDF')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we'll compute the statistical moments of the distribution (mean, variance, skewness, kurtosis), noting that the mean and variance are calculalated using closed-form expressions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean, variance, skewness, kurtosis (array(135.37345464), array(238.43710092), array(0.9142011), array(0.24932382))\n"
     ]
    }
   ],
   "source": [
    "m, v, s, k = rv.stats('mvsk')\n",
    "print(\"mean, variance, skewness, kurtosis\", (m, v, s, k))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
